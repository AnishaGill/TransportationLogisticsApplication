Index: data/orderbook.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"load\": [{\n          \"drop off date\": \"8\",\n          \"pick up date\": \"8\",\n          \"drop off location\": \"8\",\n          \"rate\": 8,\n          \"goods\": \"8\",\n          \"driver name\": \"Jimmy\",\n          \"pick up location\": \"8\",\n          \"trip number\": 1,\n          \"status\": true\n}]}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/orderbook.json b/data/orderbook.json
--- a/data/orderbook.json	(revision 242333b6ee65643fba0a26aea6dbb254695368c2)
+++ b/data/orderbook.json	(date 1640992905455)
@@ -1,11 +1,24 @@
-{"load": [{
-          "drop off date": "8",
-          "pick up date": "8",
-          "drop off location": "8",
-          "rate": 8,
-          "goods": "8",
-          "driver name": "Jimmy",
-          "pick up location": "8",
-          "trip number": 1,
-          "status": true
-}]}
\ No newline at end of file
+{"load": [
+          {
+                    "drop off date": "5",
+                    "pick up date": "5",
+                    "drop off location": "5",
+                    "rate": 5,
+                    "goods": "5",
+                    "driver name": "5",
+                    "pick up location": "5",
+                    "trip number": 1,
+                    "status": true
+          },
+          {
+                    "drop off date": "8",
+                    "pick up date": "9",
+                    "drop off location": "8",
+                    "rate": 88,
+                    "goods": "8",
+                    "driver name": "8",
+                    "pick up location": "8",
+                    "trip number": 2,
+                    "status": true
+          }
+]}
\ No newline at end of file
Index: src/main/gui/DispatchAppUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gui;\n\nimport model.Load;\nimport model.Orderbook;\nimport persistence.JsonReader;\nimport persistence.JsonWriter;\n\nimport javax.swing.*;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\nimport java.util.ArrayList;\n\n// Dispatch Application Graphical User Interface\npublic class DispatchAppUI extends JFrame {\n    private static final int WIDTH = 800;\n    private static final int HEIGHT = 600;\n    private JPanel dispatchBoard;\n    private Orderbook orderbook;\n\n    private DefaultListModel listModel = new DefaultListModel();\n    private JList list = new JList<String>(listModel);\n\n    private JsonWriter jsonWriter;\n    private JsonReader jsonReader;\n    private static final String JSON_STORE = \"./data/orderbook.json\";\n\n    // Dispatch Application GUI constructor\n    public DispatchAppUI() throws FileNotFoundException {\n        orderbook = new Orderbook();\n        dispatchBoard = new JPanel();\n        dispatchBoard.setLayout(new GridLayout(0, 2));\n\n        setContentPane(dispatchBoard);\n        setTitle(\"AG Dispatch\");\n        setSize(WIDTH, HEIGHT);\n\n        addButtons();\n        JComponent newContentPane = new AddAllActiveLoadDisplay();\n        dispatchBoard.add(newContentPane);\n\n        jsonWriter = new JsonWriter(JSON_STORE);\n        jsonReader = new JsonReader(JSON_STORE);\n\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        this.setVisible(true);\n    }\n\n\n    // MODIFIES: this (buttons are added to panel)\n    // EFFECTS: creates button panel for buttons to interact with Load, and Orderbook, adds new panel to\n    //          dispatchBoard\n    private void addButtons() {\n        JPanel buttonPanel = new JPanel();\n        buttonPanel.setLayout(new FlowLayout());\n        buttonPanel.add(new JButton(new AddLoadAction()));\n        buttonPanel.add(new JButton(new ViewOrderbookAction()));\n        buttonPanel.add(new JButton(new SaveOrderbookAction()));\n        buttonPanel.add(new JButton(new LoadOrderbookAction()));\n        dispatchBoard.add(buttonPanel, BorderLayout.WEST);\n    }\n\n    // MODIFIES: this, buttonPanel\n    // EFFECTS: AddLoad button functionality, model and GUI\n    private class AddLoadAction extends AbstractAction {\n\n        AddLoadAction() {\n            super(\"Add Load\");\n        }\n\n        @SuppressWarnings({\"checkstyle:MethodLength\", \"checkstyle:SuppressWarnings\"})\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            JTextField rateField = new JTextField(5);\n            JTextField pickUpDateField = new JTextField(5);\n            JTextField pickUpLocationField = new JTextField(5);\n            JTextField dropOffDateField = new JTextField(5);\n            JTextField dropOffLocationField = new JTextField(5);\n            JTextField goodsField = new JTextField(5);\n            JTextField driverNameField = new JTextField(5);\n            Load load;\n            JPanel p1 = new JPanel();\n\n            load = orderbook.addLoad();\n\n            p1.add(new JLabel(\"Rate:\"));\n            p1.add(rateField);\n\n            p1.add(new JLabel(\"Pick up date:\"));\n            p1.add(pickUpDateField);\n\n            p1.add(new JLabel(\"Pick up location:\"));\n            p1.add(pickUpLocationField);\n\n            p1.add(new JLabel(\"Drop off date:\"));\n            p1.add(dropOffDateField);\n\n            p1.add(new JLabel(\"Drop off location:\"));\n            p1.add(dropOffLocationField);\n\n            p1.add(new JLabel(\"Goods:\"));\n            p1.add(goodsField);\n\n            p1.add(new JLabel(\"Driver Name:\"));\n            p1.add(driverNameField);\n\n\n            int result = JOptionPane.showConfirmDialog(\n                    null, p1,\n                    \"New Load\", JOptionPane.OK_CANCEL_OPTION);\n\n            if (result == JOptionPane.OK_OPTION) {\n                double r1 = Double.parseDouble(rateField.getText());\n                load.setRate(r1);\n                load.setPickUpDate(pickUpDateField.getText());\n                load.setPickUpLocation(pickUpLocationField.getText());\n                load.setDropOffDate(dropOffDateField.getText());\n                load.setDropOffLocation(dropOffLocationField.getText());\n                load.setDropOffLocation(dropOffLocationField.getText());\n                load.setGoods(goodsField.getText());\n                load.setDriverName(driverNameField.getText());\n            }\n\n            String s = \"Trip #\" + load.getTripNum() + \" | \" + \"Rate: $\" + load.getRate()\n                    + \" | \" + \"Pickup Location: \" + load.getPickUpLocation() + \" | \"\n                    + \"Pickup Date: \" + load.getPickUpDate() + \" | \"\n                    + \"Drop Off Location: \" + load.getDropOffLocation() + \" | \"\n                    + \"Drop Off Date: \" + load.getDropOffDate() + \" | \"\n                    + \"Goods: \" + load.getGoods() + \" | \"\n                    + \"Driver: \" + load.getDriverName();\n\n            listModel.addElement(s);\n\n        }\n\n        private void doRate() {\n        }\n\n\n    }\n\n    private class ViewOrderbookAction extends AbstractAction {\n        // Viewing Orderbook functionality\n\n        ViewOrderbookAction() {\n            super(\"View OrderBook\");\n        }\n\n        @Override\n        // MODIFIES: this\n        // EFFECTS: Creates Orderbook display window, and displays all loads in orderbook\n        public void actionPerformed(ActionEvent e) {\n            // String orderbookDisplay =\n            JOptionPane.showMessageDialog(\n                    null, orDisplay(), \"Orderbook\", JOptionPane.INFORMATION_MESSAGE);\n        }\n\n        // MODIFIES: this\n        // EFFECTS: Creates Orderbook line display\n        public String orDisplay() {\n            String text = \"<html>\";\n            ArrayList<String> tripBook = orderbook.fullOrderbook();\n\n            for (String t : tripBook) {\n                Load ld = orderbook.findID((Integer.parseInt(t)));\n                String s1 = \"<br> Trip #: \" + t + \" ------- \" + ld.getDriverName() + \"</br>\";\n                text += s1;\n            }\n            return text;\n\n        }\n\n\n    }\n\n\n    public class SaveOrderbookAction extends AbstractAction {\n        // Saving functionality\n\n        SaveOrderbookAction() {\n            super(\"Save Orderbook\");\n        }\n\n\n        @Override\n        // MODIFIES: this\n        // EFFECTS: Save orderbook button functionality, model and GUI\n        public void actionPerformed(ActionEvent e) {\n            try {\n                jsonWriter.open();\n                jsonWriter.write(orderbook);\n                jsonWriter.close();\n                System.out.println(\"Saved orderbook to \" + JSON_STORE);\n            } catch (FileNotFoundException exception) {\n                JOptionPane.showMessageDialog(\n                        null, \"Unable to write to file: \" + JSON_STORE,\n                        \"Saving error\", JOptionPane.ERROR_MESSAGE);\n            }\n            JOptionPane.showMessageDialog(\n                    null, \"Your Orderbook has been saved!\",\n                    \"Saved\", JOptionPane.INFORMATION_MESSAGE);\n\n        }\n    }\n\n\n    private class LoadOrderbookAction extends AbstractAction {\n        // Load Orderbook functionality\n\n        LoadOrderbookAction() {\n            super(\"Load Orderbook\");\n        }\n\n        @Override\n        // MODIFIES: this\n        // EFFECTS: Load orderbook button functionality, model and GUI\n        public void actionPerformed(ActionEvent e) {\n            try {\n                orderbook = jsonReader.read();\n                System.out.println(\"Loaded orderbook from \" + JSON_STORE);\n            } catch (IOException exception) {\n                JOptionPane.showMessageDialog(\n                        null, \"Unable to read to file: \" + JSON_STORE,\n                        \"Loading error\", JOptionPane.ERROR_MESSAGE);\n            }\n            JOptionPane.showMessageDialog(\n                    null, \"Your Orderbook has been loaded, you are ready to roll!\",\n                    \"Loaded\", JOptionPane.INFORMATION_MESSAGE);\n\n        }\n    }\n\n\n\n    public class AddAllActiveLoadDisplay extends JPanel implements ListSelectionListener {\n        // UI of the active loads\n\n        private JButton deliveredButton;\n\n        // MODIFIES: this\n        // EFFECTS: Creates and added JList, and JScrollPane\n        public AddAllActiveLoadDisplay() {\n            super(new BorderLayout());\n            String deliveredString = \"Delivered\";\n\n            // create the list and put it in the scroll pane\n            list = new JList<String>(listModel);\n            list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n            list.setSelectedIndex(0);\n            list.addListSelectionListener(this);\n            list.setVisibleRowCount(5);\n            JScrollPane listScrollPane = new JScrollPane(list);\n\n            deliveredButton = new JButton(deliveredString);\n            deliveredButton.setActionCommand(deliveredString);\n            deliveredButton.addActionListener(new DeliveredAction());\n\n            //Create a panel that uses BoxLayout.\n            JPanel buttonPane = new JPanel();\n            buttonPane.setLayout(new BoxLayout(buttonPane,\n                    BoxLayout.LINE_AXIS));\n            buttonPane.add(deliveredButton);\n            buttonPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\n            add(buttonPane, BorderLayout.PAGE_END);\n            add(listScrollPane, BorderLayout.CENTER);\n        }\n\n\n        @Override\n        // From ListDemo\n        public void valueChanged(ListSelectionEvent e) {\n            if (e.getValueIsAdjusting() == false) {\n\n                if (list.getSelectedIndex() == -1) {\n                    deliveredButton.setEnabled(false);\n\n                } else {\n                    deliveredButton.setEnabled(true);\n                }\n            }\n        }\n\n\n        class DeliveredAction implements ActionListener {\n            // Deliver button functionality\n\n            @Override\n            // MODIFIES: this\n            // EFFECTS: Deliver button functionality, model and GUI\n            public void actionPerformed(ActionEvent e) {\n                int size = listModel.getSize();\n\n                int index = list.getSelectedIndex();\n                ArrayList<String> filteredOrderBook = orderbook.filterUncompleted();\n                String tripNum = filteredOrderBook.get(index);\n                Load selectedLoad = orderbook.findID(Integer.parseInt(tripNum));\n                selectedLoad.setCompleted();\n                listModel.remove(index);\n\n\n                if (size == 0) {\n                    deliveredButton.setEnabled(false);\n\n                } else {\n                    if (index == listModel.getSize()) {\n                        //removed item in last position\n                        index--;\n                    }\n\n                    list.setSelectedIndex(index);\n                    list.ensureIndexIsVisible(index);\n\n                }\n            }\n\n        }\n    }\n\n\n    // Starts the application\n    public static void main(String[] args) {\n        try {\n\n            // Splash Screen\n            JWindow window = new JWindow();\n            ImageIcon icon = new ImageIcon(\"src/main/gui/flameTruck.png\");\n            JLabel label = new JLabel(\"Launching\", icon, JLabel.CENTER);\n            label.setVerticalTextPosition(JLabel.TOP);\n            label.setHorizontalTextPosition(JLabel.CENTER);\n            window.add(label);\n\n            window.setBounds(300, 50, 700, 300);\n            window.setVisible(true);\n            try {\n                Thread.sleep(10000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            window.dispose();\n\n\n            new DispatchAppUI();\n\n        } catch (FileNotFoundException e) {\n            JOptionPane.showMessageDialog(\n                    null, \"Unable to run application: file not found\",\n                    \"Orderbook\", JOptionPane.INFORMATION_MESSAGE);\n        }\n\n    }\n\n\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/gui/DispatchAppUI.java b/src/main/gui/DispatchAppUI.java
--- a/src/main/gui/DispatchAppUI.java	(revision 242333b6ee65643fba0a26aea6dbb254695368c2)
+++ b/src/main/gui/DispatchAppUI.java	(date 1640992905462)
@@ -334,11 +334,10 @@
             label.setVerticalTextPosition(JLabel.TOP);
             label.setHorizontalTextPosition(JLabel.CENTER);
             window.add(label);
-
             window.setBounds(300, 50, 700, 300);
             window.setVisible(true);
             try {
-                Thread.sleep(10000);
+                Thread.sleep(3000);
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
